#! /usr/bin/perl

## zfsync - synchronize latest snapshot from a source to a target using ZFS incremental rollup snapshots (zfs send -R -I).

## temp format: zfsync [[user@]host:]source target [-z]
## the -z argument adds ZFS compression.
## sources in the format host:path or user@host:path will add SSH transport.
##
## example: zfsync root@localhost:locutus/source locutus/target

# require IO::Handle;

use Sys::Hostname;

$source = $ARGV[0];
$target = $ARGV[1];

if ($ARGV[2] eq '-z') {
	$compress = 1;
	$gzip = '| /bin/gzip -3';
	$zcat = '| /bin/zcat';
}

if ($source =~ /^\S*:/) {
	# ssh source
	$sourcehost = $source;
	$sourcehost =~ s/:.*$//;
	$source =~ s/^\S*://;
	$ssh = "/usr/bin/ssh -c arcfour $sourcehost";
}

# if we have pv available on the system, let's find it and use it.
if (-e '/sbin/pv') { $pv = '/sbin/pv'; }
elsif (-e '/bin/pv') { $pv = '/bin/pv'; }
elsif (-e '/usr/sbin/pv') { $pv = '/usr/sbin/pv'; }
elsif (-e '/usr/bin/pv') { $pv = '/usr/bin/pv'; }
elsif (-e '/usr/local/sbin/pv') { $pv = '/usr/local/sbin/pv'; }
elsif (-e '/usr/local/bin/pv') { $pv = '/usr/local/bin/pv'; }
elsif (-e '/opt/pv') { $pv = '/opt/pv'; }
elsif (-e '/usr/local/opt/pv') { $pv = '/usr/local/opt/pv'; }

$hostid = hostname;

my @dateparts = &get_date;
my $datestamp = $dateparts[4];

# get a list of zfsync snapshots from the source
print STDERR "Getting list of snapshots from source...\n";
@sourcesnapsraw = `$ssh zfs list -rH -t snapshot -S creation -o name $source`;
while (my $snap = pop(@sourcesnapsraw)) {
	if ($snap =~ /zfsync_$hostid/) { push @sourcesnaps, $snap; }
}
# we're going to want an extra copy of this array later, for pruning.
@prunesourcesnaps = @sourcesnaps;

# does the target exist yet?
@targetexists = `zfs list -o name`;
while (my $snap = pop(@targetexists)) { 
	chomp $snap;
	if ($snap eq $target) { $targetexists=1; }
}

if ($targetexists) { 
	print STDERR "Target exists.  Finding snapshots.\n";
	@targetsnapsraw = `zfs list -rH -t snapshot -S creation -o name`;
	while (my $snap = pop(@targetsnapsraw)) {
		if ($snap =~ /zfsync_$hostid/) { push @targetsnaps, $snap; }
	}
	# print STDERR "Found zfsync snapshots on target: \n@targetsnaps\n";
	$numtargetsnaps = scalar @targetsnaps;
	# we're going to want an extra copy of these later, for pruning.
	@prunetargetsnaps = @targetsnaps;
	# we're going to have to destroy target if we don't have any zfsync snaps on it
	if (! $numtargetsnaps) {
		print STDERR "No zfsync snaps on target: destroying target.\n";
		system ("zfs destroy -r $target");
		$targetexists = 0;
	}
}

if ($numtargetsnaps) {
	# make sure we have a snap on the source to match a targetsnap
	print STDERR "Attempting to match zfsync snapshots on source and target.\n";
	while (! $matchedsnaps && (my $targetsnap = pop(@targetsnaps))) {
		chomp $targetsnap;
		$targetsnapname = $targetsnap;
		$targetsnapname =~ s/^.*\@//;
		foreach $sourcesnap (@sourcesnaps) {
			if (! $matchedsnaps) {
				chomp $sourcesnap;
				$sourcesnapname = $sourcesnap;
				$sourcesnapname =~ s/^.*\@//;
				if ($targetsnapname eq $sourcesnapname) { 
					$matchedsnaps = 1; 
					$oldsourcesnap = $sourcesnap; 
					$oldsourcesnapname = $oldsourcesnap;
					$oldsourcesnapname =~ s/^.*?\@//;
					print STDERR "Found matching zfsync snapshot $sourcesnapname on source and target.\n";
					$used = `$ssh zfs diff $sourcesnap $source`;
					if ($used eq '') {
						print STDERR "No new data on $source since $sourcesnap - nothing to sync, exiting.\n";
						exit;
					} 
				} else {
					# print STDERR "source snap $sourcesnapname does not match target snap $targetsnapname.\n";
				}
			}
		}
	}
	# we're going to have to destroy target if there are no source zfsync snaps
	if (! $matchedsnaps) {
		print STDERR "No matching zfsync snaps between source and target: destroying target.\n";
		system ("zfs destroy -r $target");
		$targetexists = 0;
	}
}	

# create zfsync snapshot on the source
$newsourcesnap = "$source\@zfsync\_$hostid\_$datestamp";
print STDERR "Creating $newsourcesnap on source...\n";
system("$ssh zfs snapshot $newsourcesnap");

if (! $targetexists) {
	# Woo, first sync... this'll be a hot minute, amirite?
	print STDERR "Target does not exist - will be created with initial transfer.\n";
	@sendsize = `$ssh zfs send -nP -R $newsourcesnap 2>&1`;
	$SOURCE = "$ssh \'zfs send -R $newsourcesnap $gzip\' $zcat ";
} else {
	# incremental send yo.  rollback the target to the newest matched snapshot first.
	print STDERR "Found matching snapshots. Rolling target back to $oldsourcesnapname before transfer.\n";
	system ("zfs rollback $target\@$oldsourcesnapname");
	@sendsize = `$ssh zfs send -nP -R -I $oldsourcesnap $newsourcesnap 2>&1`;
	$SOURCE = "$ssh \'zfs send -R -I $oldsourcesnap $newsourcesnap $gzip\' $zcat ";
}

# process sendsize: last line is summary, remove human-readable crap from it to get xfer estimate in bytes
$sendsize = pop(@sendsize);		
$sendsize =~ s/^size\s*//;
chomp $sendsize;

if ($pv =~ /pv/) { $pv = "$pv -s $sendsize |"; }

$TARGET = "$pv zfs receive $target";

print STDERR "Effective command: $SOURCE | $TARGET\n\n";
open SOURCE, "$SOURCE |"
        or print $! ? "Error opening zfs send: $!"
        : "Exit status $? from zfs send";
binmode SOURCE;

open TARGET, "| $TARGET"
        or print $! ? "Error opening zfs receive: $!"
        : "Exit status $? from zfs receive";
binmode TARGET;

$blocksize = 65536;
#$blocksize = 1048576;

while ($bufsize = read (SOURCE, $buffer, $blocksize)) {
	$xferred += $bufsize;
	print TARGET $buffer
        	or die $! ? "Error writing to zfs receive: $!"
	        : "Exit status $? from zfs receive";

	if (! ($pv =~ /pv/) ) {
		# ugly, rough homemade progress meter
		print STDERR "Transferred " . sprintf("%.1f",$xferred/1024/1024) . " MB (~ " . sprintf("%.2f",$xferred/$sendsize*100*.999) . "%)\n";
		print STDERR "\e[A";
	}
}

close SOURCE
	or print $! ? "Error closing zfs send: $!"
	: "Exit status $? from zfs send";
close TARGET
	or print $! ? "Error closing zfs receive: $!"
	: "Exit status $? from zfs receive";

$targetsnap2 = $newsourcesnap;
$targetsnap2 =~ s/^.*?\@//;
$targetsnap2 = "$target\@" . $targetsnap2;
$success = `zfs list -t snap $targetsnap2`;

if ($success) { 
	@newtargetsnapsraw = `zfs list -rH -t snapshot -S creation -o name`;
	while (my $snap = pop(@newtargetsnapsraw)) {
		if ($snap =~ /zfsync_$hostid/) { push @newtargetsnaps, $snap; }
	}
	$newtargetsnap = pop(@newtargetsnaps);
	print "Transfer complete! Updated $target to $newtargetsnap.\n"; 
	print STDERR "Pruning old zfsync snaps on source...\n";
	foreach $snap (@prunesourcesnaps) {
		system ("$ssh zfs destroy $snap");
	}
	print STDERR "Pruning old zfsync snaps on target...\n";
	foreach $snap (@prunetargetsnaps) {
		system ("zfs destroy $snap");
	}
	exit 0;
} else { 
	print "Transfer FAILED!  Died after transferring " . sprintf("%.1f",$xferred/1024/1024) . " of approximately " . sprintf("%.1f",$sendsize/1024/1024) . " MB. :(\n"; 
	exit 3;
}

exit;

sub get_date {
        ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
        $year = $year + 1900;
        my $unix_time = (((((((($year - 1971) * 365) + $yday) * 24) + $hour) * 60) + $min) * 60) + $sec;
        $sec = sprintf ("%02u", $sec);
        $min = sprintf ("%02u", $min);
        $hour = sprintf ("%02u", $hour);
        $mday = sprintf ("%02u", $mday);
        $mon = sprintf ("%02u", ($mon + 1));
        my $datestamp = "$year-$mon-$mday:$hour:$min:$sec";
        return ($sec,$min,$hour,$unix_time,$datestamp);
}

