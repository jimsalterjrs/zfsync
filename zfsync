#! /usr/bin/perl

## zfsync - synchronize new snapshots from a remote source 
## to a local target using SSH transport and ZFS incremental 
## rollup snapshots (zfs send -R -I).
##
## syntax: zfsync [user@]host:source target [minpercentfree]
##
## zfsync currently REQUIRES SSH transport for the source
## and CANNOT use SSH transport for the target - ie "pull"
## backups only, no push.
##
## zfsync will create snapshots on the source in the form
## @zfsync_remotehostname_timestamp.  This allows you to
## use zfsync to sync the same source to multiple targets
## without the targets stomping on each others' snapshots.
##
## zfsync will use ANY matching snapshots between target
## and source, not just zfsync snapshots.  This allows, for
## example, incremental progress from overall failed zfsync
## runs - if you have hourly snapshots on the source and run
## zfsync once per day, a daily zfsync run that crashes or 
## is killed halfway through will have probably successfully
## replicated 12 of the 24 hourly snapshots, and the next 
## zfsync run can pick up from the latest one instead of 
## starting all over from the last zfsync_remotehost snapshot.
##
## [minpercentfree] is the minimum percentage of the target
## which must be free before replication will occur.  zfsync
## will prune non-zfsync snapshots from oldest to newest
## in order to try to create this space, and die if there
## still isn't enough after all but one (non-zfsync) snapshot
## have been pruned.  If not specified, 0.1 (10%) is assumed.

require IO::Handle;
use Sys::Hostname;

my $source = $ARGV[0];
my $target = $ARGV[1];
my $min_free_space = $ARGV[2];

# default 10% minimum free space required
if ($min_free_space eq '') { $min_free_space = 0.1; }

# Yay gzip!  Yay conserved network bandwidth! Feel free to 
# disable if you hate your network.  And fun.  And puppies.
my $use_gz = 1;

# A local copy of mbuffer really whips the llama's ass -
# even with a mere 64M allocated, it came close to doubling
# my real-world replication speed across a gigabit LAN.
my $use_local_mbuffer = 1;
my $local_mbuffer_size = '128M';

# Arcfour encryption DRASTICALLY speeds up SSH transport.
# Disable this if you hate your CPU, and love long sync
# times.  (Or if your tinfoil hat tells you that the
# NSA is, like, totally MITMing you with arcfour but you
# WILL BE SO SUPER SAFE YOU GUYS with some other cipher.
my $cipher = "-c arcfour";

# Remote mbuffer is probably not as big a win.  Over a WAN
# link it will improve performance over local mbuffer alone,
# but it does zero good over a LAN connection.  Also, mbuffer
# invoked via SSH spams us with ugly stupid message about 
# tape drives. That can't be turned off.  WTF.
#
# Disabled by default, at least until I build in checks to find
# it automatically on the remote host.
my $use_remote_mbuffer = 0;
my $remote_mbuffer_size = '128M';

my $compress; 
my $gzip; 
my $zcat;
if ($use_gz) {
	$compress = 1;
	$gzip = '| /bin/gzip -3';
	$zcat = '| /bin/zcat';
}

my $sourcehost; 
my $ssh;
if ($source =~ /^\S*:/) {
	$sourcehost = $source;
	$sourcehost =~ s/:.*$//;
	$source =~ s/^\S*://;
	if ( ($cipher ne '') && 		# fix $cipher to -c $cipher
	   (!($cipher =~ /^\s*-c/)) ) { 	# if not already
		$cipher = '-c ' . $cipher; 	# written that way
	}
	$ssh = "/usr/bin/ssh $cipher $sourcehost";
}

# find the local zfs command 
my $zfs;
if (-e '/sbin/zfs') { $zfs = '/sbin/zfs'; }
elsif (-e '/bin/zfs') { $zfs = '/bin/zfs'; }
elsif (-e '/usr/sbin/zfs') { $zfs = '/usr/sbin/zfs'; }
elsif (-e '/usr/bin/zfs') { $zfs = '/usr/bin/zfs'; }
elsif (-e '/usr/local/sbin/zfs') { $zfs = '/usr/local/sbin/zfs'; }
elsif (-e '/usr/local/bin/zfs') { $zfs = '/usr/local/bin/zfs'; }
elsif (-e '/opt/zfs') { $zfs = '/opt/zfs'; }
elsif (-e '/usr/local/opt/zfs') { $zfs = '/usr/local/opt/zfs'; }

# if we have pv available on the system, let's find it and use it.
my $pv;
if (-e '/sbin/pv') { $pv = '/sbin/pv'; }
elsif (-e '/bin/pv') { $pv = '/bin/pv'; }
elsif (-e '/usr/sbin/pv') { $pv = '/usr/sbin/pv'; }
elsif (-e '/usr/bin/pv') { $pv = '/usr/bin/pv'; }
elsif (-e '/usr/local/sbin/pv') { $pv = '/usr/local/sbin/pv'; }
elsif (-e '/usr/local/bin/pv') { $pv = '/usr/local/bin/pv'; }
elsif (-e '/opt/pv') { $pv = '/opt/pv'; }
elsif (-e '/usr/local/opt/pv') { $pv = '/usr/local/opt/pv'; }

# if we have mbuffer available on the system, let's find it and use it.
my $local_mbuffer;
if (-e '/sbin/mbuffer') { $local_mbuffer = '/sbin/mbuffer'; }
elsif (-e '/bin/mbuffer') { $local_mbuffer = '/bin/mbuffer'; }
elsif (-e '/usr/sbin/mbuffer') { $local_mbuffer = '/usr/sbin/mbuffer'; }
elsif (-e '/usr/bin/mbuffer') { $local_mbuffer = '/usr/bin/mbuffer'; }
elsif (-e '/usr/local/sbin/mbuffer') { $local_mbuffer = '/usr/local/sbin/mbuffer'; }
elsif (-e '/usr/local/bin/mbuffer') { $local_mbuffer = '/usr/local/bin/mbuffer'; }
elsif (-e '/opt/mbuffer') { $local_mbuffer = '/opt/mbuffer'; }
elsif (-e '/usr/local/opt/mbuffer') { $local_mbuffer = '/usr/local/opt/mbuffer'; }
else { $use_local_mbuffer = 0; }

# must do better... sigh
my $remote_mbuffer = $local_mbuffer;

# reasonable defaults to mbuffer... not so sure the -s 128k is a win, though?
$local_mbuffer .= " -q -s 128k -m $local_mbuffer_size";
$remote_mbuffer .= " -q -s 128k -m $remote_mbuffer_size";

# create zfsync snapshot on the source
my $hostid = hostname;
my @dateparts = &get_date;
my $datestamp = $dateparts[4];
my $newsnap = "zfsync\_$hostid\_$datestamp";
print STDERR "Creating $newsnap on $source... ";
system("$ssh $zfs snapshot $source\@$newsnap");
print STDERR "created.\n";

# get a list of snapshots from the source, including the
# one we just created
my %ssdetails = getsnaps($zfs,$ssh,$source);

# does the target exist yet?
my $targetexists = 0;
my @targetexists = `$zfs list -o name`;
while ( my $snap = pop(@targetexists) ) { 
	chomp $snap;
	if ($snap eq $target) { $targetexists=1; }
}

my @targetsnaps;
my $numtargetsnaps;
my %tsdetails;
if ($targetexists) { 
	#print STDERR "Target exists.  Finding snapshots... ";
	@targetsnaps = `$zfs list -rH -t snapshot -S creation -o name $target`;
	$numtargetsnaps = scalar @targetsnaps;
	#print STDERR "found $numtargetsnaps snapshots on target.\n";

	if (! $numtargetsnaps) {
		# we're going destroy target if we don't have any snapshots on it
		print STDERR "No snapshots on target: destroying target.\n";
		system ("$zfs destroy -r $target");
		$targetexists = 0;
	} else {
		# we have snapshots, now we need details to match up with the source
		%tsdetails = getsnaps ($zfs,'',$target);
	}
}

# make sure we have a snap on the source to match a targetsnap
my $matched = 0;
my $oldsnap;
if ($targetexists && $numtargetsnaps) {
	#print STDERR "Attempting to match zfsync snapshots on source and target.\n";
	# iterate the target hash in reverse creation order (ie, newest creation first)
	foreach my $name ( sort { $tsdetails{$b}{'creation'} <=> $tsdetails{$a}{'creation'} } keys %tsdetails ) {
		if (
		     ! $matched
		     && $tsdetails{$name}{'creation'} == $ssdetails{$name}{'creation'}
		   ) {
			#print STDERR "Match found: snapshot $name exists with same creation on source and target.\n";
			$matched = 1;
			$oldsnap = $name;
          
			my $used = `$ssh $zfs diff $source\@$oldsnap $source`;
			if ($used eq '') {
				print "SUCCESS: No new data on $source to sync, exiting.\n";
				exit 0;
			} 
		}	
	}

	# if we DO have snapshots on the target, but none of them match the source, let's just die honorably now. ='(
	if (! $matched) {
		print "FAILURE: no matching zfsync snaps between $sourcehost:$source and $target: committing seppuku now.\n";
		exit 3;
	}
}	

# Before we actually try to sync, let's make sure we have enough space on the target.
# If we DON'T have enough space, let's prune some snapshots and try to make some.
if ( $targetexists 
     && (! &prune ($zfs,$target,$min_free_space)) 
   ) {
	# We couldn't make enough free space - die with honor. ='(
	print "FAILURE: all but one non-zfsync snapshots pruned, still less than " . $min_free_space * 100 . "% free.  Exiting.\n";
	exit 5;
}

my @sendsize;
my $sendsize;
my $SOURCE;
if ($targetexists) {
	@sendsize = `$ssh zfs send -nP -R -I $source\@$oldsnap $source\@$newsnap 2>&1`;
	$SOURCE = "$ssh \'$zfs send -R -I $source\@$oldsnap $source\@$newsnap $gzip \' $zcat ";
} else {
	# Woo, first sync... this'll be a hot minute, amirite?
	print STDERR "$target does not exist - will be created with initial transfer.\n";
	@sendsize = `$ssh $zfs send -nP -R $source\@$newsnap 2>&1`;
	$SOURCE = "$ssh \'$zfs send -R $source\@$newsnap $gzip \' $zcat ";
}

# process sendsize: last line of multi-line output is 
# size of proposed xfer in bytes, but we need to remove 
# human-readable crap from it 
$sendsize = pop(@sendsize);		
$sendsize =~ s/^size\s*//;
chomp $sendsize;

if ($targetexists) {
	# do we have enough space to accommodate the new snapshots?  If not, die honorably ='(
	my $free_space = (`$zfs get -Hp available -o value $target`);  # bytes
	if ($sendsize > $free_space) { 
		my $disp_sendsize = sprintf("%.2F",$sendsize/1024/1024/1024);
		print "FAILURE: Not enough space on $target for $disp_sendsize";
		print "G of data from $sourcehost:$source... exiting.\n";
		# Let's clean up the unnecessary zfsync snapshot we created on the source
		# before seppuku is final, shall we?
		system ("$ssh '$zfs destroy $source\@$newsnap'");
		exit 4;
	} else {
		# enough free space, and it's an incremental send yo.  
		# let's rollback the target to the newest matched snapshot first.
		print STDERR "Rolling back to $target\@$oldsnap before transfer.\n";
		system ("$zfs rollback -r $target\@$oldsnap");
	}
}

if ($pv =~ /pv/) { $pv = "$pv -s $sendsize |"; }

my $TARGET = "$pv $zfs receive $target";

if ($use_local_mbuffer) {
	$SOURCE =~ s/\' /\' \| $local_mbuffer /;
}

if ($use_remote_mbuffer) {
	$SOURCE =~ s/\' /\| $remote_mbuffer \' /;
}

#print STDERR "\nEffective command: $SOURCE | $TARGET\n\n";

open SOURCE, "$SOURCE |"
        or print $! ? "Error opening zfs send: $!"
        : "Exit status $? from zfs send";
binmode SOURCE;

open TARGET, "| $TARGET"
        or print $! ? "Error opening zfs receive: $!"
        : "Exit status $? from zfs receive";
binmode TARGET;

my $blocksize = 65536;   # 64K - increasing blocksize substantially may improve performance on a LAN

print STDERR "Transferring approximately " . sprintf("%.1f",$sendsize/1024/1024) . " MB...\n\n";
my $xferred;
while (my $bufsize = read (SOURCE, my $buffer, $blocksize)) {
	$xferred += $bufsize;
	print TARGET $buffer
        	or die $! ? "Error writing to zfs receive: $!"
	        : "Exit status $? from zfs receive";

	if (! ($pv =~ /pv/) ) {
		# ugly, rough homemade progress meter
		print STDERR "Transferred " . sprintf("%.1f",$xferred/1024/1024) . " MB (~ " . sprintf("%.2f",$xferred/$sendsize*100*.999) . "%)\n";
		print STDERR "\e[A";
	}
}

close SOURCE
	or print $! ? "Error closing zfs send: $!"
	: "Exit status $? from zfs send";
close TARGET
	or print $! ? "Error closing zfs receive: $!"
	: "Exit status $? from zfs receive";

$success = `$zfs list -t snap $target\@$newsnap`;

if ($success) { 
	&prune_zfsync_snapshots ($zfs,$ssh,$source);
	&prune_zfsync_snapshots ($zfs,'',$target);
	print "SUCCESS: Updated $target from \@$oldsnap to \@$newsnap.\n"; 
	exit 0;
} else { 
	# well, we crashed and burned - but did we get ANY snapshots successfully replicated before we did?
	my @newtargetsnap = `zfs list -r -t snap -o name -S creation -H $target`;
	$newtargetsnap[0] =~ s/^.*?\@//;
	chomp $newtargetsnap[0];

	print "FAILURE:  Died after transferring " . sprintf("%.1f",$xferred/1024/1024) . " of approximately " . sprintf("%.1f",$sendsize/1024/1024) . " MB "; 

	if ($newtargetsnap[0] ne $oldsnap) {
		# Yay, we at least managed SOME replication!
		print "; $target was \@$oldsnap, is now \@$newtargetsnap[0].\n";
	} else {
		# Boo, we completely wasted our time, bandwidth, and storage load ='(
		print ".\n";
	}
	# Let's clean up the unnecessary zfsync snapshot we created on the source
	# before seppuku is final, shall we?
	system ("$ssh '$zfs destroy $source\@$newsnap'");
	exit 3;
}

exit 256; # this should NEVAR EVAR HAPPEN! =)

########### begin subroutines below ##############

sub get_date {
        my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
        $year = $year + 1900;
        my $unix_time = (((((((($year - 1971) * 365) + $yday) * 24) + $hour) * 60) + $min) * 60) + $sec;
        $sec = sprintf ("%02u", $sec);
        $min = sprintf ("%02u", $min);
        $hour = sprintf ("%02u", $hour);
        $mday = sprintf ("%02u", $mday);
        $mon = sprintf ("%02u", ($mon + 1));
        my $datestamp = "$year-$mon-$mday:$hour:$min:$sec";
        return ($sec,$min,$hour,$unix_time,$datestamp);
}

sub getsnaps {
	## 
	## three arguments needed
	##
	## $zfs_cmd - command to run zfs
	## $ssh     - ssh command including the host - pass blank
	##            arg to run on localhost
	## $system  - the name of the ZFS filesystem
	##
	## returns a hash of all the snapshots on the 
	## filesystem along with their creation timestamps.

	my $zfs_cmd = shift;
	my $ssh = shift;
	my $system = shift;

	my @snaps = `$ssh $zfs_cmd list -rH -t snapshot -o name $system`;
	
	# building a single command to get the creation timestamp
	# for each snapshot on $system. we'll run the command once it's built.
	# this avoids unnecessary SSH tunnel creation overhead.
	my $cmd;
	foreach my $snap(@snaps) {
		chomp $snap;
		$cmd .= "$zfs_cmd get -Hp -o name,property,value creation,referenced $snap; ";
	}

	my @snaprawdetails;
	if ($cmd ne '') { 
		if ($ssh ne '' ) { @snaprawdetails = `$ssh \'$cmd\'`; } 
			else { @snaprawdetails = `$cmd`; }
	}
	
	# build a hash for the snapshot details.
	my %sdetails;
	foreach my $srow (@snaprawdetails) {
		my @srow = split " ",$srow;
		# we only want the snapshot ID, not the zfs pathname
		$srow[0] =~ s/^.*?\@//;
		$sdetails {$srow[0]}{$srow[1]} = $srow[2];
	}

	#foreach my $name ( keys %sdetails ) {
	#	print STDERR "name: $name creation: $sdetails{$name}{'creation'} \n";
	#}

	return %sdetails;
}

sub prune_zfsync_snapshots {
	
	## get rid of all but the last zfsync snapshot on $system.
	## takes arguments $zfs_cmd, $ssh, $system.
	##
	## $ssh should include ssh command and remote hostname.
	## $ssh should be blank if you want to prune on the local system.
	
	my $zfs_cmd = shift;
	my $ssh = shift;
	my $system = shift; 

	# let's get a fresh list of snapshots
	my %sdetails = getsnaps ($zfs_cmd, $ssh, $system);
	
	my $cmd;
	my $skippedthefirst=0;
	foreach my $name ( sort { $sdetails{$b}{'creation'} <=> $sdetails{$a}{'creation'} } keys %sdetails ) {
		if ($name =~ /zfsync\_$hostid/) {
			if ($skippedthefirst) { $cmd .= "$zfs destroy $system\@$name ; "; } else { $skippedthefirst = 1; }
		}
	}

	# if there's a command to run, run it.
	if ($cmd ne '') { 
		if ($ssh ne '') {
			system ("$ssh '$cmd'"); 
		} else {
			system ($cmd);
		}
	}
}

sub prune {
	## prune takes arguments zfs_cmd, zfs_target, min_free_percentage
	##
	## min_free_percentage should be in decimal form, ie 0.1 for 10%
	##
	## snapshots on zfs_target will be pruned from oldest to newest
	## until >= min_free_percentage is available on zfs_target.
	##
	## prune will refuse to prune snapshots in the form /zfsync/,
	## and it will not prune the very newest NON-zfsync snapshot
	## either.
	##
	## prune is fairly noisy, but writes only to STDERR, never STDOUT,
	## so it won't spam up any cron logs or mailed reports unless its
	## parent is invoked 2>&1 or similar.
	##
	## note: prune will DIE, not return, if not passed any of its
	## required arguments.  this is a feature, not a bug. =)
	##
	## prune returns 1 on success, 0 on failure.

	my $zfs_cmd = shift;			# first argument passed to function
	my $zfs_target = shift;			# second argument passed to the function
	my $min_free_percentage = shift;	# third argument passed to the function
	
	if ($zfs_cmd eq '') { die "Please specify a path to the local ZFS command.\n"; }
	if ($zfs_target eq '') { die "Please specify a ZFS target to prune.\n"; }
	if ($min_free_percentage eq '') { die "Please specify a minimum free percentage.\n"; }
		
	my $free_space = (`$zfs_cmd get -Hp available -o value $zfs_target`);
	my $disp_free_space = sprintf("%.2f", ($free_space/1024/1024/1024)) . 'G';
	my $mirror_size = (`$zfs_cmd get -Hp usedbydataset -o value $zfs_target`);
	my $filesystem_size = (`$zfs_cmd get -Hp used -o value $zfs_target`) + $free_space;
	my $min_free_space = $filesystem_size * $min_free_percentage;
	my $disp_min_free_space = sprintf("%.2f", $min_free_space/1024/1024/1024) . 'G';
	my $percent_free = sprintf("%.2f", ($free_space / $filesystem_size * 100));
	
	if ($free_space >= $min_free_space) {
		print STDERR "\nMinimum free space is $disp_min_free_space (" . ($min_free_percentage * 100) . "%) ; $disp_free_space ($percent_free" . "\%) free.\n";
		return 1;
	}
	
	# don't try to prune zfsync snapshots for space, please.
	my @rawsnapshots = `$zfs_cmd list -rH -t snapshot -S creation -o name $zfs_target`;
	while (my $snap = pop @rawsnapshots) {
		chomp $snap;
		if (! ($snap =~ /zfsync/)) { push @snapshots,$snap; }
	}	
	
	# turns out this loop won't remove the very last snapshot. 
	# in original intent, this was a bug.  on careful reflection, 
	# however, it's a feature.
	
	my $snapshot_count = $#snapshots;
	while (($free_space < $min_free_space) * ($snapshot_count > 0)) {
		my $next_snapshot = shift(@snapshots);
		print STDERR "$disp_free_space ($percent_free" . "\%) free ; $disp_min_free_space (" . ($min_free_percentage * 100) . "%) required: ";
	        print STDERR "pruning $next_snapshot ... \n";
	        system ("$zfs_cmd destroy -rR $next_snapshot") ;
	                # or die "could not prune $next_snapshot: $?"
	        $snapshot_count += -1;
		$free_space = (`$zfs_cmd get -Hp available -o value $zfs_target`);
		$percent_free = sprintf("%.2f", ($free_space / $filesystem_size * 100));
		$disp_free_space = sprintf("%.2f", ($free_space/1024/1024/1024)) . 'G';
	}
	
	if ($free_space >= $min_free_space) {
		print STDERR "Minimum free space is $disp_min_free_space (" . ($min_free_percentage * 100) . "%) ; $disp_free_space ($percent_free" . "\%) free.\n\n";
		return 1;
	} else {
		print STDERR "\nAll but one non-zfsync snapshots pruned, but only ";
		print STDERR "$disp_free_space ($percent_free" . "\%) free ; $disp_min_free_space (" . ($min_free_percentage * 100) . "%) required.\n\n";
		return 0;
	}
}
